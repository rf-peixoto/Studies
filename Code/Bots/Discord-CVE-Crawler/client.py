from manager import Manager
from tools import Tools
import discord, json
import subprocess

# ------------------------------------------------------------------------ #
# Setup
# ------------------------------------------------------------------------ #
manager = Manager()
tools = Tools()
client = discord.Client()

# ------------------------------------------------------------------------ #
# Start
# ------------------------------------------------------------------------ #

# [ ... ]

# ------------------------------------------------------------------------ #
# On Message
# ------------------------------------------------------------------------ #
@client.event
async def on_message(message):
    # Ignore self and bot messages:
    if message.author == client.user or message.author.bot:
        return

    # Ignore private messages:
    if str(message.channel.type) == "private":
        await message.channel.trigger_typing()
        await message.channel.send("You cannot use this service in private chats.")

    # ------------------------------------------------------------------- #
    # Admin Commands
    # ------------------------------------------------------------------- #
    if str(message.author.id) == tools.owner_id:
        # Test:
        if message.content.startswith(".test"):
            print("Testing command.")
            pass

    # ------------------------------------------------------------------- #
    # Public Commands
    # ------------------------------------------------------------------- #
    # Search CVEs:
    if message.content.startswith(".find"):
        await message.channel.trigger_typing()
        tmp = tools.sanitize(message.content.split(".find ")[-1]).lower()
        query_size = manager.get_list_size(tmp)
        if query_size > 0:
            response = "Found {0} results to this query:".format(str(query_size))
            response += "```{0}```".format(manager.extract_cves(tmp))
        else:
            response = "No results found."
        # Check response size:
        if len(response) <= 1999:
            await message.channel.send(response)
        else:
            url = "https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword={0}".format(tmp)
            await message.channel.send("Found {0} results to this query:".format(str(query_size)))
            await message.channel.send("The response to this query is very large by Discord standards. Check the results at {0} .".format(url))

    # Check Specific CVE:
    if message.content.startswith(".check"):
        await message.channel.trigger_typing()
        tmp = tools.sanitize(message.content.split(".check ")[-1]).lower()
        query = manager.get_details(tmp)
        links = ""
        for i in query[0][1]:
            links += i
        response = "**{0}:** {1}\n```{2}```".format(query[0][0], query[0][2], links)
        #response = query
        await message.channel.send(response)

    # Get Exploit:
    if message.content.startswith(".exploit"):
        await message.channel.trigger_typing()
        tmp = tools.sanitize(message.content.split(".exploit ")[-1])
        # Look for exploits:
        cmd = subprocess.run("./searchsploit -j --cve {0}".format(tmp), shell=True, capture_output=True).stdout
        data = json.loads(cmd.decode())
        # Find & open file:
        if len(data['RESULTS_EXPLOIT']) == 0:
            await message.channel.send("No exploit found.")
        else:
            xpl_path = data['RESULTS_EXPLOIT'][-1]['Path']
            with open(xpl_path, "rb") as fl:
                xpl = discord.File(xpl_path, xpl_path.split('/')[-1])
            await message.channel.send(content="", file=xpl)

# ------------------------------------------------------------------------ #
# Run
# ------------------------------------------------------------------------ #
client.run(tools.bot_token)
